[
    {
        "title": "$:/plugins/oeyoews/book-status",
        "type": "application/json",
        "text": "{\"tiddlers\":{\"$:/plugins/oeyoews/book-status/readme\":{\"title\":\"$:/plugins/oeyoews/book-status/readme\",\"text\":\"## book status\\n\\n> https://github.com/oeyoews/reading-books-with-tiddlywiki\\n\\n记录你读过的每一个笔记(此插件针对上述链接的项目)\\n\\n## TODO\\n\\n- [x] 在每个目录旁边显示是否阅读过, bingo/x\\n- [x] 获取目录json数据\\n- [x] getstorytiddler\\n- [x] click event\\n- [x] status json\\n- [x] 如何获取每个笔记的书名, 通过sourceTiddler, 或者获取tag, 每本书只有一个tag\\n- [x] viewtemplate(filter: $:/plugins/books/) 也许可以做成viewtoolbar, 但是不够醒目\\n- [x] 也许可以借助localstorage当作临时状态(), 最后结束是, 询问是否要保存此次阅读记录, 通知阅读时间\\n- [x] 支持待看状态\\n- [x] 每本书一个配置文件, 目前是一个文件\\n\",\"type\":\"text/markdown\",\"description\":\"book-status\"},\"$:/plugins/oeyoews/book-status/mergeObj.js\":{\"title\":\"$:/plugins/oeyoews/book-status/mergeObj.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/oeyoews/book-status/mergeObj.js\\r\\ntype: application/javascript\\r\\nmodule-type: library\\r\\n\\r\\n\\\\*/\\r\\n// TODO: Object.assign\\r\\nmodule.exports = function mergeObjects(target, ...sources) {\\r\\n  for (const source of sources) {\\r\\n    for (const key in source) {\\r\\n      if (source.hasOwnProperty(key)) {\\r\\n        if (typeof source[key] === 'object' && !Array.isArray(source[key])) {\\r\\n          // 如果属性值是对象，则递归地合并子对象\\r\\n          if (!target.hasOwnProperty(key) || typeof target[key] !== 'object') {\\r\\n            target[key] = {};\\r\\n          }\\r\\n          mergeObjects(target[key], source[key]);\\r\\n        } else {\\r\\n          // 否则直接复制属性值\\r\\n          target[key] = source[key];\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  return target;\\r\\n};\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/oeyoews/book-status/tocstatus.js\":{\"title\":\"$:/plugins/oeyoews/book-status/tocstatus.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/book-status/tocstatus.js\\ntype: application/javascript\\nmodule-type: widget\\n\\n使用wikitext 应该也能做, 但是数据在json里面, 比较麻烦\\n\\\\*/\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\n\\nclass BookTocStatusWidget extends Widget {\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n  }\\n\\n  render(parent, nextSibling) {\\n    if (!$tw.browser) return;\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n\\n    const { bookname = '劫持' } = this.attributes;\\n    const wiki = $tw.wiki;\\n    const createElement = $tw.utils.domMaker;\\n    const statusfilename = 'bookstatus.json';\\n    const statuses = wiki.getTiddlerData(statusfilename);\\n    const pluginname = '$:/plugins/books/' + bookname;\\n    if (!wiki.tiddlerExists(pluginname)) return;\\n    const { tiddlers } = wiki.getPluginInfo(pluginname);\\n    const toc = Object.keys(tiddlers)\\n      .filter((title) => !title.startsWith('$:/'))\\n      .map((title) => ({\\n        title,\\n        status: '未读',\\n      }));\\n    const readlist = Object.entries(statuses?.[bookname]).map(\\n      ([title, status]) => ({\\n        title,\\n        status,\\n      }),\\n    );\\n    const tocstatuslist = new Map();\\n    toc.forEach(({ title, status }) => {\\n      tocstatuslist.set(title, status);\\n    });\\n    readlist.forEach(({ title, status }) => {\\n      tocstatuslist.set(title, status);\\n    });\\n\\n    const children = [];\\n\\n    // update status\\n    const createLi = (title, status) => {\\n      const li = this.document.createElement('li');\\n      const color = status === '已读' ? 'green' : 'red';\\n      const icon = status === '已读' ? 'emojione-v1:left-check-mark' : '未读';\\n      const content = $tw.wiki.renderText(\\n        'text/html',\\n        'text/vnd.tiddlywiki',\\n        `[[${title}]]\\n<% if [[$:/plugins/oeyoews/neotw-icons]has[plugin-type]] %>\\n  <$iconify icon=${icon} />\\n<% endif %>\\n<sup>@@color:${color};font-size:10px;${status}@@</sup>`,\\n      );\\n      li.innerHTML = content;\\n      children.push(li);\\n      li.addEventListener('click', (e) => {\\n        const progress = new $tw.NProgress();\\n        progress.start();\\n        e.preventDefault();\\n        new $tw.Story().navigateTiddler(title);\\n        progress.done();\\n      });\\n    };\\n\\n    tocstatuslist.forEach((status, title) => {\\n      createLi(title, status);\\n    });\\n\\n    const domNode = createElement('ol', {\\n      children,\\n    });\\n\\n    parent.insertBefore(domNode, nextSibling);\\n    this.domNodes.push(domNode);\\n  }\\n}\\n\\n/**\\n * @description book-status widget\\n * @param bookname\\n */\\nexports.tocstatus = BookTocStatusWidget;\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/oeyoews/book-status/viewTemplate\":{\"title\":\"$:/plugins/oeyoews/book-status/viewTemplate\",\"tags\":\"$:/tags/ViewTemplate\",\"text\":\"<$list filter=\\\"[all[current]is[shadow]has[bookname]]\\\">\\r\\n  <$bookstatus />\\r\\n</$list>\\r\\n\"},\"$:/plugins/oeyoews/book-status/widget.js\":{\"title\":\"$:/plugins/oeyoews/book-status/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/book-status/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nbook-status widget\\n\\n\\\\*/\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\nconst mergeObj = require('./mergeObj');\\n\\nclass BookStatusWidget extends Widget {\\n  static STATUS_UNREAD = '未读';\\n  static STATUS_READ = '已读';\\n\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n    this.bookstatusfilename = 'bookstatus.json';\\n    this.statuses = new Map();\\n    this.btn;\\n  }\\n\\n  readStatuses() {\\n    const config = $tw.wiki.getTiddlerData(this.bookstatusfilename) || {};\\n    // json对象转Map\\n    Object.entries(config).forEach(([bookname, book]) => {\\n      Object.entries(book).forEach(([title, status]) => {\\n        const key = `${bookname}/${title}`;\\n        this.statuses.set(key, status);\\n      });\\n    });\\n  }\\n\\n  // 当需要获取某个书籍的阅读状态时，会先从 Map 中查找，如果没有找到则从配置文件中读取数据并进行解析，\\n  // 然后将结果存入 Map 中以备下次使用。\\n  getStatus(bookname, title) {\\n    const key = `${bookname}/${title}`;\\n    if (!this.statuses.has(key)) {\\n      this.readStatuses();\\n    }\\n    return this.statuses.get(key) || '未读';\\n  }\\n\\n  updateStatus(bookname, title) {\\n    this.parentWidget.dispatchEvent({\\n      type: 'om-nprogress',\\n    });\\n    if (title.startsWith('Draft of') || !bookname) return;\\n    const wiki = $tw.wiki;\\n\\n    const defaultconfig = wiki.getTiddlerData(this.bookstatusfilename) || {};\\n    if (!wiki.tiddlerExists(this.bookstatusfilename)) {\\n      wiki.addTiddler({\\n        type: 'application/json',\\n        title: this.bookstatusfilename,\\n        'meta#disabled': 'yes', // disable meta file\\n        text: '',\\n      });\\n    }\\n    const key = `${bookname}/${title}`;\\n    const status = this.getStatus(bookname, title);\\n    const newStatus =\\n      status === BookStatusWidget.STATUS_READ\\n        ? BookStatusWidget.STATUS_UNREAD\\n        : BookStatusWidget.STATUS_READ;\\n    this.statuses.set(key, newStatus);\\n    const obj = {\\n      [bookname]: {\\n        [title]: newStatus,\\n      },\\n    };\\n    mergeObj(defaultconfig, obj);\\n    wiki.setText(\\n      this.bookstatusfilename,\\n      'text',\\n      null,\\n      JSON.stringify(defaultconfig),\\n      {\\n        suppressTimestamp: true,\\n      },\\n    );\\n    this.parentWidget.dispatchEvent({\\n      type: 'om-notify',\\n      paramObject: {\\n        status: newStatus === BookStatusWidget.STATUS_READ ? 'success' : 'info',\\n        title,\\n        text: `更新状态: ${newStatus}`,\\n      },\\n    });\\n    this.btn.removeEventListener('click', () =>\\n      this.updateStatus(bookname, title),\\n    );\\n    this.refreshSelf();\\n    this.parentWidget.dispatchEvent({\\n      type: 'om-nprogress-done',\\n    });\\n  }\\n\\n  render(parent, nextSibling) {\\n    if (!$tw.browser) return;\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n\\n    const createElement = $tw.utils.domMaker;\\n    const wiki = $tw.wiki;\\n    const title = this.getVariable('storyTiddler');\\n    const pluginname = wiki.getShadowSource(title);\\n    const { book: bookname } = wiki.getTiddler(pluginname)?.fields || {};\\n    const status = this.getStatus(bookname, title);\\n\\n    const statusClass =\\n      status === BookStatusWidget.STATUS_READ\\n        ? 'text-green-400'\\n        : 'text-rose-400';\\n    this.btn = createElement('button', {\\n      text: status,\\n      class: `p-2 ${statusClass}`,\\n    });\\n\\n    this.btn.addEventListener('click', () =>\\n      this.updateStatus(bookname, title),\\n    );\\n\\n    const domNode = createElement('div', {\\n      class: 'flex justify-end',\\n      children: [this.btn],\\n    });\\n\\n    parent.insertBefore(domNode, nextSibling);\\n    this.domNodes.push(domNode);\\n  }\\n}\\n\\n/**\\n * @description book-status widget\\n * @param configfilename\\n */\\nexports.bookstatus = BookStatusWidget;\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}",
        "description": "book-status",
        "author": "oeyoews",
        "version": "0.0.9",
        "core-version": ">=5.3.1",
        "plugin-type": "plugin",
        "name": "book-status",
        "meat#disabled": "yes",
        "dependents": "$:/plugins/oeyoews/notify $:/plugins/oeyoews/neotw-icons $:/plugins/oeyoews/nprogress",
        "list": "readme"
    }
]